<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 특정 위치에 존재하는 controller 클래스를 로딩하기 위한 코드 -->
	<!--
	<context:component-scan base-package="me.dec7.web" />
	 
		component-scan을 사용하다보면
		parent인 applicationContext.xml에서 scan된 bean이
		children 중 하나인 dec-servlet.xml에서 scan될 수도 있다.
		
		그러면 2개 이상의 bean이 생성될 수 있다.
		이 문제를 막기 위해서 include와 exclude 기능을 사용할 수 있다.
	 -->
	 <context:component-scan base-package="me.dec7.web" >
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	 	<!-- 
	 		Controller annotation에 해당하는 것만 component scan을 하고 나머지는 exclude를 하라는 의미
	 	-->
	 </context:component-scan>
	
	<!--
		controller를 인식하는 방법에 대한 코드
		controller간의 mapping을 annotation 기반으로 한다는 설정
	-->
	<mvc:annotation-driven />
	
	<!--
		dispatcher servlet의 url mapping이 / 인 경우 static파일 요청도 들어오고 읽지 못하는 문제 발생하기 때문
		/images/로 시작하는 모든 요청 (**)에 대해서는 location directory를 참고하라는 내용
	-->
	<mvc:resources location="/images/" mapping="/images/**" />
	<mvc:resources location="/stylesheets/" mapping="/stylesheets/**" />
	<mvc:resources location="/javascripts/" mapping="/javascripts/**" />
	
	<!--
		view에 대한 설정 / jsp를 접근할 때 어떤 방식으로 할 건지에 대한 설정
		internal view resolver: project 내부에 있는 resource에 접근 하라는 의미
	 -->
	 <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
	 	p:prefix="/WEB-INF/jsp/"
	 	p:suffix=".jsp" />
	 
	 <!-- 
	 	error message는 보통 resources directory내에 message*.properties file로 관리됨
	 	다양한 naming 규칙이 존재하지만
	 	[유효성 검사명].[class명, 첫문자 소문자].[해당 field 명]으로 사용될 수 있음. <자바지기 스타일>
	 	
	 	또한 이러한 메시지 규칙을 담아둔 messages.properties file을 messageSource라고 부름
	 	
	 	servlet에서 xml file을 불러오기 위해 bean 설정함
	 	
	 	또한 spring에서 messageSource를 불러오기위한 class가 존재함
	 	
	 	전달 인자로 basename이 필요함 / 하지만 .properties extension은 필요없음
	 	또한 classpath를 이용할 경우 file을 찾지 못하는 문제점이 있음 <동영상 server side validation2 4:28>
	  -->
	 <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
	 	p:basename="messages"
	 	p:defaultEncoding="UTF-8" />

</beans>
