<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
		
	<!-- 
		backend를 아래 bean처럼 설정하기보다 mvc처럼 annotation 기반으로 설정할 수 있다면 훨씬 편하게 설정할 수 있을 것임
		component-scan을 이용해서 설정 가능
	 -->
	<context:component-scan base-package="me.dec7.dao">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<!-- 
			back package에서 Conntroller annotation을 제외한 나머지를 include 하라는 의미
		 -->
	</context:component-scan>
	

	<!-- 목적:  application-properties를 읽어와서 dbcp를 설정 -->
	
	<!-- *를 붙이면 classpath에 있는 모든 application-properties.xml을 불러오라는 의미로 사용 -->
	<context:property-placeholder location="classpath*:application-properties.xml"/>
	
	<!-- @PostConstruct 같은 Annotation 설정을 실행하기 위해서 -->
	<context:annotation-config />
	
	
	<!-- properties 파일을 다음과 같이 사용할 수 있음 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
		p:driverClassName="${database.driverClassName}"
		p:url="${database.url}"
		p:username="${database.username}"
		p:password="${database.password}" />
	
	
	<!-- database와 connection을 통해 query를 실행해야하므로 datasource를 전달해야함  -->
	<!--  <bean id="userDao" class="me.dec7.dao.users.JdbcUserDao" 
		p:dataSource-ref="dataSource" /> -->
	
	<!--
		context:component-scan 을 통해 bean이 아닌 annotation기반으로 lookup
	<bean id="userDao" class="me.dec7.dao.users.MyBatisUserDao" 
		p:sqlSession-ref="sqlSession"  />
	 -->
		<!-- p:dataSource-ref="dataSource" /> -->
	
	<!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:/mybatis-config.xml" />
		
	
		
		<!-- p:는 setter-injection -->
		
	<!-- SqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 
			constructor-arg는 DI를 설정할 때 constructor-injection을 사용함.
			<생성자 주입>
		-->
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 
		transaction 설정 가능
		namespace 기반 transaction처리를 위해 tx namespace를 추가함
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	
	<!-- annotation기반으로 transaction 처리하기 -->
	<tx:annotation-driven />
	
	
</beans>
